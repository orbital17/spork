// Code generated by protoc-gen-go. DO NOT EDIT.
// source: files.proto

package grpc_api

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type UploadChunkRequest struct {
	FileId               int64    `protobuf:"varint,1,opt,name=fileId,proto3" json:"fileId,omitempty"`
	Chunk                int32    `protobuf:"varint,2,opt,name=chunk,proto3" json:"chunk,omitempty"`
	Bytes                []byte   `protobuf:"bytes,3,opt,name=bytes,proto3" json:"bytes,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UploadChunkRequest) Reset()         { *m = UploadChunkRequest{} }
func (m *UploadChunkRequest) String() string { return proto.CompactTextString(m) }
func (*UploadChunkRequest) ProtoMessage()    {}
func (*UploadChunkRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cac8f32ecfdd343c, []int{0}
}

func (m *UploadChunkRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UploadChunkRequest.Unmarshal(m, b)
}
func (m *UploadChunkRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UploadChunkRequest.Marshal(b, m, deterministic)
}
func (m *UploadChunkRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UploadChunkRequest.Merge(m, src)
}
func (m *UploadChunkRequest) XXX_Size() int {
	return xxx_messageInfo_UploadChunkRequest.Size(m)
}
func (m *UploadChunkRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UploadChunkRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UploadChunkRequest proto.InternalMessageInfo

func (m *UploadChunkRequest) GetFileId() int64 {
	if m != nil {
		return m.FileId
	}
	return 0
}

func (m *UploadChunkRequest) GetChunk() int32 {
	if m != nil {
		return m.Chunk
	}
	return 0
}

func (m *UploadChunkRequest) GetBytes() []byte {
	if m != nil {
		return m.Bytes
	}
	return nil
}

type Status struct {
	Status               bool     `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Status) Reset()         { *m = Status{} }
func (m *Status) String() string { return proto.CompactTextString(m) }
func (*Status) ProtoMessage()    {}
func (*Status) Descriptor() ([]byte, []int) {
	return fileDescriptor_cac8f32ecfdd343c, []int{1}
}

func (m *Status) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Status.Unmarshal(m, b)
}
func (m *Status) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Status.Marshal(b, m, deterministic)
}
func (m *Status) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Status.Merge(m, src)
}
func (m *Status) XXX_Size() int {
	return xxx_messageInfo_Status.Size(m)
}
func (m *Status) XXX_DiscardUnknown() {
	xxx_messageInfo_Status.DiscardUnknown(m)
}

var xxx_messageInfo_Status proto.InternalMessageInfo

func (m *Status) GetStatus() bool {
	if m != nil {
		return m.Status
	}
	return false
}

type InputFile struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Chunks               int32    `protobuf:"varint,2,opt,name=chunks,proto3" json:"chunks,omitempty"`
	Name                 string   `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *InputFile) Reset()         { *m = InputFile{} }
func (m *InputFile) String() string { return proto.CompactTextString(m) }
func (*InputFile) ProtoMessage()    {}
func (*InputFile) Descriptor() ([]byte, []int) {
	return fileDescriptor_cac8f32ecfdd343c, []int{2}
}

func (m *InputFile) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InputFile.Unmarshal(m, b)
}
func (m *InputFile) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InputFile.Marshal(b, m, deterministic)
}
func (m *InputFile) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InputFile.Merge(m, src)
}
func (m *InputFile) XXX_Size() int {
	return xxx_messageInfo_InputFile.Size(m)
}
func (m *InputFile) XXX_DiscardUnknown() {
	xxx_messageInfo_InputFile.DiscardUnknown(m)
}

var xxx_messageInfo_InputFile proto.InternalMessageInfo

func (m *InputFile) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *InputFile) GetChunks() int32 {
	if m != nil {
		return m.Chunks
	}
	return 0
}

func (m *InputFile) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type FileLocation struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FileLocation) Reset()         { *m = FileLocation{} }
func (m *FileLocation) String() string { return proto.CompactTextString(m) }
func (*FileLocation) ProtoMessage()    {}
func (*FileLocation) Descriptor() ([]byte, []int) {
	return fileDescriptor_cac8f32ecfdd343c, []int{3}
}

func (m *FileLocation) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FileLocation.Unmarshal(m, b)
}
func (m *FileLocation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FileLocation.Marshal(b, m, deterministic)
}
func (m *FileLocation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FileLocation.Merge(m, src)
}
func (m *FileLocation) XXX_Size() int {
	return xxx_messageInfo_FileLocation.Size(m)
}
func (m *FileLocation) XXX_DiscardUnknown() {
	xxx_messageInfo_FileLocation.DiscardUnknown(m)
}

var xxx_messageInfo_FileLocation proto.InternalMessageInfo

func init() {
	proto.RegisterType((*UploadChunkRequest)(nil), "UploadChunkRequest")
	proto.RegisterType((*Status)(nil), "Status")
	proto.RegisterType((*InputFile)(nil), "InputFile")
	proto.RegisterType((*FileLocation)(nil), "FileLocation")
}

func init() { proto.RegisterFile("files.proto", fileDescriptor_cac8f32ecfdd343c) }

var fileDescriptor_cac8f32ecfdd343c = []byte{
	// 247 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x90, 0xc1, 0x4a, 0x03, 0x31,
	0x10, 0x86, 0xbb, 0xdb, 0xee, 0xda, 0x4e, 0x6b, 0x0f, 0xa3, 0xc8, 0xd2, 0xd3, 0x12, 0x2f, 0x7b,
	0x31, 0x07, 0x7d, 0x03, 0x05, 0xa5, 0xe0, 0x29, 0x45, 0x10, 0x3d, 0x48, 0xba, 0x1b, 0x35, 0xb8,
	0x26, 0xb1, 0x49, 0x04, 0xdf, 0x5e, 0x92, 0x8d, 0x52, 0xe8, 0x6d, 0xbe, 0x30, 0xf9, 0xfe, 0x99,
	0x81, 0xf9, 0xab, 0xec, 0x85, 0xa5, 0x66, 0xa7, 0x9d, 0x26, 0x8f, 0x80, 0x0f, 0xa6, 0xd7, 0xbc,
	0xbb, 0x79, 0xf7, 0xea, 0x83, 0x89, 0x2f, 0x2f, 0xac, 0xc3, 0x33, 0x28, 0x43, 0xd3, 0xba, 0xab,
	0xb2, 0x3a, 0x6b, 0xc6, 0x2c, 0x11, 0x9e, 0x42, 0xd1, 0x86, 0xbe, 0x2a, 0xaf, 0xb3, 0xa6, 0x60,
	0x03, 0x84, 0xd7, 0xed, 0x8f, 0x13, 0xb6, 0x1a, 0xd7, 0x59, 0xb3, 0x60, 0x03, 0x90, 0x1a, 0xca,
	0x8d, 0xe3, 0xce, 0xdb, 0x60, 0xb3, 0xb1, 0x8a, 0xb6, 0x29, 0x4b, 0x44, 0xee, 0x60, 0xb6, 0x56,
	0xc6, 0xbb, 0x5b, 0xd9, 0x0b, 0x5c, 0x42, 0x2e, 0xff, 0xe2, 0x72, 0xd9, 0x85, 0x4f, 0xd1, 0x6e,
	0x53, 0x56, 0x22, 0x44, 0x98, 0x28, 0xfe, 0x29, 0x62, 0xd6, 0x8c, 0xc5, 0x9a, 0x2c, 0x61, 0x11,
	0x1c, 0xf7, 0xba, 0xe5, 0x4e, 0x6a, 0x75, 0xf9, 0x0c, 0x45, 0x60, 0x8b, 0x17, 0x30, 0xdf, 0xdb,
	0x0e, 0x4f, 0xe8, 0xe1, 0xae, 0xab, 0x23, 0x3a, 0x8c, 0x49, 0x46, 0x78, 0x0e, 0x93, 0x0d, 0xff,
	0x16, 0x08, 0xf4, 0x7f, 0xae, 0xd5, 0x31, 0xdd, 0x57, 0x93, 0xd1, 0x35, 0x3c, 0x4d, 0xdf, 0x76,
	0xa6, 0x7d, 0xe1, 0x46, 0x6e, 0xcb, 0x78, 0xc4, 0xab, 0xdf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x08,
	0xe9, 0x0a, 0x9f, 0x53, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// FilesClient is the client API for Files service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FilesClient interface {
	UploadChunk(ctx context.Context, in *UploadChunkRequest, opts ...grpc.CallOption) (*Status, error)
	Save(ctx context.Context, in *InputFile, opts ...grpc.CallOption) (*FileLocation, error)
}

type filesClient struct {
	cc *grpc.ClientConn
}

func NewFilesClient(cc *grpc.ClientConn) FilesClient {
	return &filesClient{cc}
}

func (c *filesClient) UploadChunk(ctx context.Context, in *UploadChunkRequest, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/Files/UploadChunk", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filesClient) Save(ctx context.Context, in *InputFile, opts ...grpc.CallOption) (*FileLocation, error) {
	out := new(FileLocation)
	err := c.cc.Invoke(ctx, "/Files/Save", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FilesServer is the server API for Files service.
type FilesServer interface {
	UploadChunk(context.Context, *UploadChunkRequest) (*Status, error)
	Save(context.Context, *InputFile) (*FileLocation, error)
}

// UnimplementedFilesServer can be embedded to have forward compatible implementations.
type UnimplementedFilesServer struct {
}

func (*UnimplementedFilesServer) UploadChunk(ctx context.Context, req *UploadChunkRequest) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadChunk not implemented")
}
func (*UnimplementedFilesServer) Save(ctx context.Context, req *InputFile) (*FileLocation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Save not implemented")
}

func RegisterFilesServer(s *grpc.Server, srv FilesServer) {
	s.RegisterService(&_Files_serviceDesc, srv)
}

func _Files_UploadChunk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadChunkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilesServer).UploadChunk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Files/UploadChunk",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilesServer).UploadChunk(ctx, req.(*UploadChunkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Files_Save_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InputFile)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilesServer).Save(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Files/Save",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilesServer).Save(ctx, req.(*InputFile))
	}
	return interceptor(ctx, in, info, handler)
}

var _Files_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Files",
	HandlerType: (*FilesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UploadChunk",
			Handler:    _Files_UploadChunk_Handler,
		},
		{
			MethodName: "Save",
			Handler:    _Files_Save_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "files.proto",
}
